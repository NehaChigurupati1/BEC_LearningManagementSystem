
# StudyHub Learning Management System (LMS) Documentation

## Overview
StudyHub LMS is a modern learning management system designed to help educational organizations create, manage, and deliver online courses. The platform features separate interfaces for students and administrators, with robust course content management capabilities.

## Features

### Authentication
- Email/password authentication through JWT
- Role-based access control (admin/student)
- Protected routes for secure access

### Admin Features
- Dashboard with analytics overview
- Course management (create, edit, delete courses)
- User management (view and edit user roles)
- Feedback analysis (view student ratings and comments)
- Platform settings management

### Student Features
- Personalized dashboard showing enrolled courses
- Course exploration and enrollment
- Course content viewing with video lessons
- Progress tracking across courses
- Feedback submission for courses

### Course Structure
- Courses contain weeks
- Weeks contain topics
- Topics contain videos and resources
- Resources include different types (pdf, notes, slides)

## Technology Stack

### Frontend
- React 18 with TypeScript
- React Router for navigation
- React Hook Form for form handling
- Zod for form validation
- TanStack Query (React Query) for data fetching
- Tailwind CSS for styling
- Shadcn UI component library
- Recharts for analytics visualization
- Lucide React for icons
- Sonner for toast notifications

### Backend
- Node.js with Express
- MySQL database with Sequelize ORM
- JWT for authentication
- bcrypt for password hashing
- Firebase Storage for file storage

### Database Schema
- users: User account information
- courses: Course information
- weeks: Weekly modules for courses
- topics: Individual lessons within weeks
- resources: Downloadable materials for lessons
- progress: Student progress tracking
- feedback: Student ratings and comments
- enrollments: Course enrollment tracking

## Getting Started

### Prerequisites
- Node.js 16+
- MySQL 8+
- Firebase account (for file storage)
- npm/yarn package manager

### Installation
1. Clone the repository
2. Set up Frontend:
   ```
   cd frontend
   npm install
   ```
3. Set up Backend:
   ```
   cd backend
   npm install
   ```
4. Copy `.env.example` to `.env` and configure your environment variables
5. Initialize the database:
   ```
   npm run init-db
   ```

## Database Setup
1. Install MySQL:
   - Windows: Download and install MySQL Installer
   - MacOS: Use Homebrew `brew install mysql`
   - Linux: Use `sudo apt install mysql-server`
2. Start MySQL service
3. Create a database:
   ```
   mysql -u root -p
   CREATE DATABASE lms_system;
   ```
4. Configure the database connection in `.env`
5. Run the initialization script:
   ```
   npm run init-db
   ```

## Firebase Setup
1. Create a Firebase project
2. Enable Firebase Storage
3. Get your Firebase service account credentials:
   - Go to Project Settings > Service Accounts
   - Generate a new private key (this downloads a JSON file)
4. Configure Firebase in `.env` with values from the downloaded JSON

## Running the Application
1. Start the backend:
   ```
   cd backend
   npm run dev
   ```
2. Start the frontend:
   ```
   cd frontend
   npm start
   ```
3. Access the application at http://localhost:3000

## API Endpoints
See the full API documentation in the backend/README.md file.

## Deployment
- Backend: Deploy to a server with Node.js and MySQL installed
- Frontend: Build and deploy to any static hosting service
- Configure environment variables for production use

## Testing Accounts
The application includes demo accounts for testing:
- Admin: becadmin@gmail.com / password: becadmin@987
- Student: student@example.com / password: student123
